<resources>
    <string name="app_name">For_Examples</string>
    <string name="appp">For_Examples</string>
    <string name="kotlin">What is Kotlin?\n
\nKotlin is an open-source, general-purpose programming language originally created for the Java Virtual Machine (JVM).\n The language was created by JetBrains, that started working on Kotlin in 2010, and the project was made open-source shortly after in 2012. The 1.0 version was released in 2016, and no more than three years later, Google announced that Kotlin is the preferred language for Android.\n

\nKotlin was originally meant as an alternative to Java and is fully compatible with it. This means that Kotlin can be used for updating and modernising the projects written with Java and actually expanding them, which is one of the main perks of using the language.\n

\nWhat is Kotlin used for?\n
\nThere’s a variety of ways Kotlin can be applied for different domains, and the list of possible uses is still growing. In this section, we’ve highlighted the most common ones.\n


Android development\n
\nKotlin is the language recommended for Android development and it is mainly used for this purpose. This includes projects written from scratch, as well as modernising those originally written in Java, which was the go-to language for Android before Kotlin.\n

\nAccording to the 2020 Kotlin census published by Jetbrains, over 80% of the developers surveyed recommend Kotlin for this purpose.\n

Server-side programming\n
\nThough it’s a less common usage of the language than mobile development for Android, Kotlin is a great choice for backend application development. It allows for building scalable, fast applications able to handle thousands of users.\n

\nThere’s also the possibility of writing new code using Kotlin, and still having older code written in Java since the two languages are fully compatible.\n

Cross-platform development
\nKotlin may not be the first choice for cross-platform development, but this use of the language is gaining popularity among developers. With Kotlin Multiplatform, a software development kit meant for creating cross-platform apps, you can use one code base for both your Android and iOS projects.\n

Get a quote icon\n
\nBuild an app that works on both iOS and Android\n

Learn more\n
\nMultiplatform projects are still being tested, and the features and uses may change in the future, but it’s establishing itself as a very promising cross-platform alternative.</string>

    <string name="java">Java Programming Language \n Java is one of the most popular and widely used programming languages.

Java has been one of the most popular programming languages for many years.
Java is Object Oriented. However, it is not considered as pure object-oriented as it provides support for primitive data types (like int, char, etc)
The Java codes are first compiled into byte code (machine-independent code). Then the byte code runs on Java Virtual Machine (JVM) regardless of the underlying architecture.
Java syntax is similar to C/C++. But Java does not provide low-level programming functionalities like pointers. Also, Java codes are always written in the form of classes and objects.
Java is used in all kinds of applications like Mobile Applications (Android is Java-based), desktop applications, web applications, client-server applications, enterprise applications, and many more.
When compared with C++, Java codes are generally more maintainable because Java does not allow many things which may lead to bad/inefficient programming if used incorrectly. For example, non-primitives are always references in Java. So we cannot pass large objects (like we can do in C++) to functions, we always pass references in Java. One more example, since there are no pointers, bad memory access is also not possible.
When compared with Python, Java kind of fits between C++ and Python. The programs are written in Java typically run faster than corresponding Python programs and slower than C++. Like C++, Java does static type checking, but Python does not.
</string>

    <string name="javascript">
JavaScript
        JavaScript (JS) is the world’s most popular lightweight, interpreted compiled programming language. It is also known as a scripting language for web pages. It can be used for Client-side as well as Server-side developments.

JavaScript Tutorial

JavaScript can be added to your HTML file in two ways:

Internal JavaScript: We can add JS code directly to our HTML file by writing the code inside the script tag. The script tag can either be placed inside the head or the body tag according to the requirement.
External JavaScript File: We can create a file with .js extension and paste the JS code inside it. After creating the file, add this file in script src=”file_name.js” tag inside head tag of the HTML file.
        Why JavaScript is used?
JavaScript is the most popular programming language for both client-side and server-side to make interactive web pages. It is mainly used to develop websites and web-based applications.

Creating Interactive Websites: JavaScript is used to make the web pages dynamic and interactive. It means using JavaScript, we can change the web page content and styles dynamically.
Building Applications: JavaScript is used to make web and mobile applications. To build the web and mobile apps, we can use most popular JavaScript frameworks like – ReactJS, React Native, Node.js etc.
Web Servers: We can make robust server applications using JavaScript. To be precise we use JavaScript frameworks like Node.js and Express.js to build these servers.
Game Development: JavaSCript can be used to design Browser games. In JavaScript, lots of game engines available that provide frameworks for building games.
How JavaScript is different from HTML?
JavaScript is an advanced programming language that makes web pages more interactive and dynamic whereas HTML is a standard markup language that provides the primary structure of a website.
JavaScript simply adds dynamic content to websites to make them look good and HTML work on the look of the website without the interactive effects and all.
JavaScript manipulates the content to create dynamic web pages whereas HTML pages are static which means the content cannot be changed.
JavaScript is not cross-browser compatible whereas HTML is cross-browser compatible.
JavaScript can be embedded inside HTML but HTML can not be embedded inside JavaScript.
Why to learn JavaScript ?
JavaScript is the most popular and hence the most loved language around the globe. Apart from this, there are abundant reasons to learn it. Below are a listing of few important points:

No need of compilers: Since JavaScript is an interpreted language, therefore it does not need any compiler for compilations.
Used both Client and Server-side: Earlier JavaScript was used to build client-side applications only, but with the evolution of its frameworks namely Node.js and Express.js, it is now widely used for building server-side applications too.
Helps to build a complete solution: As we saw, JavaScript is widely used in both client and server-side applications, therefore it helps us to build an end-to-end solution to a given problem.
Used everywhere: JavaScript is so loved because it can be used anywhere. It can be used to develop websites, games or mobile apps, etc.
Huge community support: JavaScript has a huge community of users and mentors who love this language and take it’s legacy forward.
    </string>

    <string name="rust">
       Introduction to Rust Programming Language\n Rust is a blazing fast and memory-efficient static compiled language with a rich type system and ownership model.
        It can be used to power performance-critical services while guaranteeing memory-safety and thread-safety, empowering developers to debug at compile-time. In addition to that Rust has great documentation and a user-friendly compiler with top-end tools like integrated package managers and multi-editor with features like type inspection and auto-completion.
        Rust prevents all the crashes, and it is very interesting that rust is safe by default like JavaScript, Ruby, and Python. This is much more powerful than C/C++ because we cannot write the wrong parallel code you can never see fault in rust. It is very fast in representing a lot of programming paradigms very well.

But the question arises as there are already so many programming languages like Python, C++, Java, etc, then why the need for developing a new programming language? The answer to this is the other programming languages have a lot of control over the hardware that you are running, like, you can optimize it well, translate directly to assembly code, but it’s not very safe.

So rust provides us all the controls that we can have and all the levels of security that we can achieve.

Rust is using Rust which means that all the standard compiler libraries are written in rust; there is a bit of use of the C programming language but most of it is Rust. The big project of Rust is “servo”,  It is a project to write out the totally parallel layout engine like Gecko in Firefox or WebKit in Safari.
 </string>

    <string name="python">
        Python Programming Language\n Python is a high-level, general-purpose and a very popular programming language. Python programming language (latest Python 3) is being used in web development, Machine Learning applications, along with all cutting edge technology in Software Industry.
        Python Programming Language is very well suited for Beginners, also for experienced programmers with other programming languages like C++ and Java.
        This specially designed Python tutorial will help you learn Python Programming Language in most efficient way, with the topics from basics to advanced (like Web-scraping, Django, Deep-Learning, etc.) with examples.


Below are some facts about Python Programming Language:

Python is currently the most widely used multi-purpose, high-level programming language.
Python allows programming in Object-Oriented and Procedural paradigms.
Python programs generally are smaller than other programming languages like Java. Programmers have to type relatively less and indentation requirement of the language, makes them readable all the time.
Python language is being used by almost all tech-giant companies like – Google, Amazon, Facebook, Instagram, Dropbox, Uber… etc.
The biggest strength of Python is huge collection of standard library which can be used for the following:
Machine Learning
GUI Applications (like Kivy, Inter, PyQt etc. )
Web frameworks like Django (used by YouTube, Instagram, Dropbox)
Image processing (like OpenCV, Pillow)
Web scraping (like Scrapy, BeautifulSoup, Selenium)
Test frameworks
Multimedia
Scientific computing
Text processing and many more..
    </string>

    <string name="csharp">
What Is C#?
C# is a modern, general-purpose programming language that can be used to perform a wide range of tasks and objectives that span over a variety of professions. C# is primarily used on the Windows .NET framework, although it can be applied to an open source platform.
        This highly versatile programming language is an object-oriented programming language (OOP) and comparably new to the game, yet a reliable crowd pleaser.

When was C# created?
When compared to long-standing languages like Python and PHP, C# is a young addition to the programming family at nearly twenty years old. The language was developed in the year 2000 by Microsoft’s Anders Hejlsberg, a Danish software engineer with a history for popular creations.
        Anders has taken part in the creation of a handful of dependable programming tools and languages, including Microsoft’s TypeScript and Delphi, a suitable replacement for Turbo Pascal.

As of November 2022, C# ranked #4 on the PYPL Popularity of Programming Language Index, right behind Java and JavaScript. The data used to compile this index is based on how often people search for a tutorial on different programming languages in Google.

C# has also made a consistent appearance in the top ten programming languages in the TIOBE Index, a report that pulls its data from a compilation of popular search engines including Google, YouTube and Bing.

Where did C# get its name?
In the beginning, C# was originally titled COOL, a clever acronym that stood for “C-like Object Oriented Language.” Unfortunately, Microsoft was unable to hang onto the fun name for reasons having to do with trademark law.
C# was originally designed to rival Java. Judging by the quick rise to popularity and the positive response from both new and seasoned developers, it’s safe to say that goal has been achieved.

What is C# used for?
Like other general-purpose programming languages, C# can be used to create a number of different programs and applications: mobile apps, desktop apps, cloud-based services, websites, enterprise software and games. Lots and lots of games. While C# is remarkably versatile, there are three areas in which it is most commonly used.

Windows applications
C# was created by Microsoft for Microsoft, so it’s easy to see why it’s most popularly used for the development of Windows desktop applications. C# applications require the Windows .NET framework in order to function at their best, so the strongest use case for this language is developing applications and programs that are specific to the architecture of the Microsoft platform.

C# for Games
C# might just be one of the best programming languages for gaming. This language is heavily used to create fan-favorite games like Rimworld on the Unity Game Engine.

Just in case you weren’t already aware, Unity is by far the most popular game engine available, on which more than a third of the industry’s best and most commonly-played games were built. C# integrates seamlessly with the Unity engine and can be used on virtually any modern mobile device or console thanks to cross-platform tech like Xamarin.

C# for website development
C# is often used to develop professional, dynamic websites on the .NET platform, or open-source software. So, even if you’re not a fan of the Microsoft architecture, you can still use C# to create a fully-functional website. Because this language is object-oriented, it is often utilized to develop websites that are incredibly efficient, easily scalable and a breeze to maintain.

What apps are made with C#?
Here are a handful of programs and applications written in C# that demonstrate the language’s diversity and reliability:

Microsoft Visual Studio

Paint.NET

Open Dental

KeePass

FlashDevelop

NMath

Pinta

OpenRA

Advantages of C# Programming
C# provides both new and seasoned programmers with a wealth of different advantages. We’ve outlined our top five favorite benefits below.
There are many different advantages to object-oriented programming (or OOP), such as efficiency and flexibility to name a few.
        Some developers who are unfamiliar with OOP may feel a little reluctant to choose a new language with such a heavy emphasis on it, but don’t worry: understanding object-oriented programming isn’t all that difficult.

Recent Articles on C# !
Overview, Fundamentals, Important Keywords, Control Statements, OOP Concepts, Methods, Delegates, Constructors, Arrays, ArrayList, String, Tuple, ValueTuple, Indexers, Inheritance, Interfaces, Multithreading, Exception Handling, Collections and Generics, Collections Namespace, Generic Namespace, System Namespace, Specialized Namespace, What’s New in C# 8.0, Windows Forms
    </string>

    <string name="php">
PHP Introduction\n The term PHP is an acronym for PHP: Hypertext Preprocessor. PHP is a server-side scripting language designed specifically for web development. It is open-source which means it is free to download and use. It is very simple to learn and use. The files have the extension “.php”.

Rasmus Lerdorf inspired the first version of PHP and participated in the later versions. It is an interpreted language and it does not require a compiler.

PHP code is executed in the server.
It can be integrated with many databases such as Oracle, Microsoft SQL Server, MySQL, PostgreSQL, Sybase, and Informix.
It is powerful to hold a content management system like WordPress and can be used to control user access.
It supports main protocols like HTTP Basic, HTTP Digest, IMAP, FTP, and others.
Websites like www.facebook.com and www.yahoo.com are also built on PHP.
One of the main reasons behind this is that PHP can be easily embedded in HTML files and HTML codes can also be written in a PHP file.
The thing that differentiates PHP from the client-side language like HTML is, that PHP codes are executed on the server whereas HTML codes are directly rendered on the browser. PHP codes are first executed on the server and then the result is returned to the browser.
The only information that the client or browser knows is the result returned after executing the PHP script on the server and not the actual PHP codes present in the PHP file. Also, PHP files can support other client-side scripting languages like CSS and JavaScript.
Other characteristics of PHP are as follows.

Simple and fast
Efficient
Secured
Flexible
Cross-platform, it works with major operating systems like Windows, Linux, and macOS.
Open Source
Powerful Library Support
Database Connectivity
        Why should we use PHP?

PHP can actually do anything related to server-side scripting or more popularly known as the backend of a website. For example, PHP can receive data from forms, generate dynamic page content, can work with databases, create sessions, send and receive cookies, send emails, etc. There are also many hash functions available in PHP to encrypt users’ data which makes PHP secure and reliable to be used as a server-side scripting language. So these are some of PHP’s abilities that make it suitable to be used as a server-side scripting language. You will get to know more of these abilities in further tutorials.
Even if the above abilities do not convince you of PHP, there are some more features of PHP. PHP can run on all major operating systems like Windows, Linux, Unix, Mac OS X, etc. Almost all of the major servers available today like Apache supports PHP. PHP allows using a wide range of databases. And the most important factor is that it is free to use and download and anyone can download PHP from its official source: www.php.net.
Please refer to setting up the development environment and basic syntax of PHP in further articles.

What’s new in PHP 7.0:

PHP 7 is faster than the previous versions.
PHP 7 supports new operators.
PHP 7 supports better Error Handling functionalities.
PHP 7 supports stricter declarations for types in function parameters.
References:
https://en.wikipedia.org/wiki/PHP
http://php.net/manual/en/introduction.php
Disadvantages of PHP:

PHP is not secure as it is open source.
Not good to create desktop applications.
Not suitable for large Web Applications- Php code is hard to maintain since it is not very modular.
Modification Problem – PHP does not allow the change in the core behavior of the web applications.
    </string>

    <string name="cplus">
        What is C++ programming language?\n C++ is a general-purpose programming language that was developed as an enhancement of the C language to include object-oriented paradigm. It is an imperative and a compiled language.

C++ is a middle-level language rendering it the advantage of programming low-level (drivers, kernels) and even higher-level applications (games, GUI, desktop apps etc.). The basic syntax and code structure of both C and C++ are the same.
Some of the features , key-points to note about the programming language are as follows:
Simple: It is a simple language in the sense that programs can be broken down into logical units and parts, has a rich library support and a variety of data-types.
Machine Independent but Platform Dependent: A C++ executable is not platform-independent (compiled programs on Linux won’t run on Windows), however they are machine independent.
Mid-level language: It is a mid-level language as we can do both systems-programming (drivers, kernels, networking etc.) and build large-scale user applications (Media Players, Photoshop, Game Engines etc.)
Rich library support: Has a rich library support (Both standard ~ built-in data structures, algorithms etc.) as well 3rd party libraries (e.g. Boost libraries) for fast and rapid development.
Speed of execution: C++ programs excel in execution speed. Since, it is a compiled language, and also hugely procedural. Newer languages have extra in-built default features such as garbage-collection
        dynamic typing etc. which slow the execution of the program overall. Since there is no additional processing overhead like this in C++, it is blazing fast.
Pointer and direct Memory-Access: C++ provides pointer support which aids users to directly manipulate storage address. This helps in doing low-level programming (where one might need to have explicit control on the storage of variables).
Object-Oriented: One of the strongest points of the language which sets it apart from C. Object-Oriented support helps C++ to make maintainable and extensible programs. i.e. Large-scale applications can be built. Procedural code becomes difficult to maintain as code-size grows.
Compiled Language: C++ is a compiled language, contributing to its speed.
Applications of C++:
C++ finds varied usage in applications such as:

Operating Systems , Systems Programming. e.g. Linux-based OS (Ubuntu etc.)
Browsers (Chrome , Firefox)
Graphics , Game engines (Photoshop, Blender, Unreal-Engine)
Database Engines (MySQL, MongoDB, Redis etc.)
Cloud/Distributed Systems
    </string>

    <string name="c">
        What is The C Programming Language?\n  C is a procedural programming language. It was initially developed by Dennis Ritchie in the year 1972. It was mainly developed as a system programming language to write an operating system.
        The main features of the C language include low-level memory access, a simple set of keywords, and a clean style, these features make C language suitable for system programmings like an operating system or compiler development.
Many later languages have borrowed syntax/features directly or indirectly from the C language. Like syntax of Java, PHP, JavaScript, and many other languages are mainly based on the C language. C++ is nearly a superset of C language (Few programs may compile in C, but not in C++).
Beginning with C programming:
Structure of a C program
After the above discussion, we can formally assess the structure of a C program. By structure, it is meant that any program can be written in this structure only. Writing a C program in any other structure will hence lead to a Compilation Error.
The structure of a C program is as follows:
The components of the above structure are:
Header Files Inclusion: The first and foremost component is the inclusion of the Header files in a C program.
A header file is a file with extension .h which contains C function declarations and macro definitions to be shared between several source files.
Some of C Header files:
stddef.h – Defines several useful types and macros.
stdint.h – Defines exact width integer types.
stdio.h – Defines core input and output functions
stdlib.h – Defines numeric conversion functions, pseudo-random network generator, memory allocation
string.h – Defines string handling functions
math.h – Defines common mathematical functions
Main Method Declaration: The next part of a C program is to declare the main() function. The syntax to declare the main function is:
Syntax to Declare the main method
    </string>

    <string name="swift">
        Swift Programming Language\n  Swift is a general-purpose, multi-paradigm, object-oriented, functional, imperative and block-structured language. Swift is the result of the latest research on programming languages and is built using a modern approach to safety,
        software design patterns by Apple Inc. for iOS applications, macOS applications, watchOS applications, tvOS applications.
Swift is easy to learn, easy to implement, safe, fast and expressive. Developing Swift in the open has its exciting aspects as it is now free to be ported across a wide range of platforms, devices, and use cases.
The features of Swift are designed to work together to create a powerful language. Additional features of Swift include:
Closures unified with function pointers
Tuples and multiple return values
Generics
Concise and fast iteration over a range or collection
Structs that support methods, extensions, and protocols
Functional programming patterns, e.g., map and filter
Powerful error handling built-in
Advanced control flow with do, guard, defer, and repeat keywords
Memory Management –
Swift uses Automatic Reference Counting (ARC) to manage memory. Earlier, Apple used to require manual memory management in Objective-C, but after introducing ARC in 2011 memory allocation and de-allocation became easier.
Swift is managed as a collection of projects, each with its repositories. The current list of projects include:


The Swift compiler command-line tool
The standard library bundled as part of the language
Core libraries that provide higher-level functionality
The Swift REPL included LLDB debugger
Xcode playground support to enable playgrounds in Xcode.
The Swift package manager for distributing and building Swift source code
Advantages –
Swift is open-sourced and easy to learn.
Swift is fast, safe and expressive.
Swift is approachable and familiar (C and C++ code can be added by Swift programmers into Swift applications.)
Swift is the future of Apple development.
Swift is enterprise-ready.
Disadvantages –
The language is still quite young and the talent pool is limited.
Swift is considered a “moving target” as it is a new language and the number of swift programmers is few.
Poor interoperability with third-party tools and IDEs
Lack of support for earlier iOS versions.
    </string>

    <string name="typescript">
TypeScript - Overview\n  What is TypeScript?
By definition, “TypeScript is JavaScript for application-scale development.”

TypeScript is a strongly typed, object oriented, compiled language. It was designed by Anders Hejlsberg (designer of C#) at Microsoft. TypeScript is both a language and a set of tools. TypeScript is a typed superset of JavaScript compiled to JavaScript. In other words, TypeScript is JavaScript plus some additional features.

TypeScript Figure
Features of TypeScript
TypeScript is just JavaScript. TypeScript starts with JavaScript and ends with JavaScript. Typescript adopts the basic building blocks of your program from JavaScript. Hence, you only need to know JavaScript to use TypeScript. All TypeScript code is converted into its JavaScript equivalent for the purpose of execution.
TypeScript supports other JS libraries. Compiled TypeScript can be consumed from any JavaScript code. TypeScript-generated JavaScript can reuse all of the existing JavaScript frameworks, tools, and libraries.
JavaScript is TypeScript. This means that any valid .js file can be renamed to .ts and compiled with other TypeScript files.
TypeScript is portable. TypeScript is portable across browsers, devices, and operating systems. It can run on any environment that JavaScript runs on. Unlike its counterparts, TypeScript doesn’t need a dedicated VM or a specific runtime environment to execute.
TypeScript and ECMAScrip
The ECMAScript specification is a standardized specification of a scripting language. There are six editions of ECMA-262 published. Version 6 of the standard is codenamed "Harmony". TypeScript is aligned with the ECMAScript6 specification.
TypeScript and ECMAScript
TypeScript adopts its basic language features from the ECMAScript5 specification, i.e., the official specification for JavaScript. TypeScript language features like Modules and class-based orientation are in line with the EcmaScript 6 specification.
        Additionally, TypeScript also embraces features like generics and type annotations that aren’t a part of the EcmaScript6 specification.
Why Use TypeScript?
TypeScript is superior to its other counterparts like CoffeeScript and Dart programming languages in a way that TypeScript is extended JavaScript. In contrast, languages like Dart, CoffeeScript are new languages in themselves and require language-specific execution environment.
The benefits of TypeScript include −

Compilation − JavaScript is an interpreted language. Hence, it needs to be run to test that it is valid. It means you write all the codes just to find no output, in case there is an error. Hence, you have to spend hours trying to find bugs in the code. The TypeScript transpiler provides the error-checking feature.
        TypeScript will compile the code and generate compilation errors, if it finds some sort of syntax errors. This helps to highlight errors before the script is run.

Strong Static Typing − JavaScript is not strongly typed. TypeScript comes with an optional static typing and type inference system through the TLS (TypeScript Language Service). The type of a variable, declared with no type, may be inferred by the TLS based on its value.

TypeScript supports type definitions for existing JavaScript libraries. TypeScript Definition file (with .d.ts extension) provides definition for external JavaScript libraries. Hence, TypeScript code can contain these libraries.

TypeScript supports Object Oriented Programming concepts like classes, interfaces, inheritance, etc.

Components of TypeScript
At its heart, TypeScript has the following three components −

Language − It comprises of the syntax, keywords, and type annotations.

The TypeScript Compiler − The TypeScript compiler (tsc) converts the instructions written in TypeScript to its JavaScript equivalent.

The TypeScript Language Service − The "Language Service" exposes an additional layer around the core compiler pipeline that are editor-like applications. The language service supports the common set of a typical editor operations like statement completions, signature help, code formatting and outlining, colorization, etc.

TypeScript Components
Declaration Files
When a TypeScript script gets compiled, there is an option to generate a declaration file (with the extension .d.ts) that functions as an interface to the components in the compiled JavaScript. The concept of declaration files is analogous to the concept of header files found in C/C++.
        The declaration files (files with .d.ts extension) provide intellisense for types, function calls, and variable support for JavaScript libraries like jQuery, MooTools, etc.
    </string>

    <string name="go">
Go Programming Language (Introduction)\n Go is a procedural programming language. It was developed in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson at Google but launched in 2009 as an open-source programming language. Programs are assembled by using packages, for efficient management of dependencies.
        This language also supports environment adopting patterns alike to dynamic languages. For eg., type inference (y := 0 is a valid declaration of a variable y of type float).
 Beginning with Go programming
There are various online IDEs such as The Go Playground, repl.it, etc. which can be used to run Go programs without installing.
For installing Go in own PCs or Laptop we need of following two software: Text editor and Compiler
Text Editor: Text editor gives you a platform where you write your source code. Following are the list of text editors:

Windows notepad
OS Edit command
Brief
Epsilon
vm or vi
Emacs
VS Code
Finding a Go Compiler: Go distribution comes as a binary installable for FreeBSD (release 8 and above), Linux, Mac OS X (Snow Leopard and above), and Windows operating systems with 32-bit (386) and 64-bit (amd64) x86 processor architectures.
For more instructions about installing. Please visit For installing GO distribution

Note: Extension of source code file of go language must be .go
        Why this “Go language”?

Because Go language is an effort to combine the ease of programming of an interpreted, dynamically typed language with the efficiency and safety of a statically typed, compiled language. It also aims to be modern, with support for networked and multicore computing.
What excluding in Go which is present in other languages?
Go attempts to reduce the amount of typing in both senses of the word. Throughout its design, developers tried to reduce clutter and complexity.
There are no forward declarations and no header files; everything is declared exactly once.
Stuttering is reduced by simple type derivation using the := declare-and-initialize construct.
There is no type hierarchy: types just are, they don’t have to announce their relationships.
Hardware Limitations

We have observed that in a decade, the hardware and processing configuration is changing at a very slow rate. In 2004, P4 was having the clock speed of 3.0 GHz and now in 2018, Macbook pro has the clock speed of Approx (2.3Ghz v 2.66Ghz). To speed up, the functionality we use more processors, but using more processor the cost also increases.
        And due to this we use limited processors and using limited processor we have a heavy programming language whose threading takes more memory and slows down the performance of our system. Hence, to overcome such problem Golang has been designed in such a way that instead of using threading it uses Goroutine, which is similar to threading but consumes very less memory.
Like threading consumes 1MB whereas Goroutine consumes 2KB of memory, hence at the same time, we can have millions of goroutine triggered.
So the above-discussed point makes golang a strong language that handles concurrency like C++ and Java.
    </string>

    <string name="sql">
      What Is SQL Programming Language?\n When you’ve heard developers talk about an SQL programming language, you probably thought of Microsoft’s SQL server.

But, Microsoft is only one of many providers of database management systems (DBMS).

For example, Oracle has an SQL-based DBMS, and MySQL is an open-source SQL management system. There is an ANSI standard for SQL, but each solution has its own unique characteristics.


Learning standard SQL can form a foundation for SQL programming languages.

However, learning a database language will add to a programmer’s tool kit and career opportunities.

What Is SQL?
SQL stands for Structured Query Language, which is a programming language used to communicate with relational databases.

The acronym is pronounced like the word sequel, but some people will just use the three letters S, Q, and L.

Although there were precursors to the SQL language as early as the 1960s, relational databases didn’t hit the market until the 1980s.

In 1979, Oracle became the first to incorporate an SQL language into its relational database construct.

SQL does have its distracters who consider it to be too slow and lacks the eloquence of other programming languages.

Despite its critics, SQL has become the standard language for querying and manipulating data stored in a relational database.

What Is a Database?
Databases are designed to hold massive amounts of data that can be accessed by multiple users simultaneously.

There are different database types, depending on data storage.

database sql-programming-language-woz-u.com

For example, distributed databases are located on multiple computers occupying the same physical space or spread over multiple locations.

Relational databases store data in tables consisting of columns and rows similar to a spreadsheet.

Spreadsheets allow for simple manipulation of stored data, while relational databases with the help of SQL allow for complex manipulation of the data.

Relational databases are the most used technology for accessing structured data.

How to Use SQL
Data is everywhere. According to the World Economic Forum, there will be 44 zettabytes of data in the digital world in 2020.

That is  1,000,000,000,000,000,000,000 bytes of data.

Where will most of that data be stored? Databases. Without SQL, those bytes of data would be meaningless.  So, what industries maintain volumes of data?

Financial Industry
Banks maintain information on every transaction processed through their system. Credit bureaus have records of mortgages, credit cards, and student loans, along with a myriad of data reported to them from other agencies.

Insurance companies keep records of policies, payments, claims, and sensitive personal information. All of this data is in databases that use the highest level of security within the SQL language.

E-Commerce
Behind the web-based storefronts are databases that supply information on the products or services of an e-commerce merchant.

In addition to individual product descriptions, merchants maintain customer buying history and shopping preferences.

Using the information in a database, merchants provide online recommendations and promotions.

Social Media
Every Facebook post, Instagram photo or Snapchat message is stored somewhere. That process of data querying requires SQL.

Without a standard programming language, it would be impossible to manipulate the data to respond to a custom search request.

Companies such as Facebook would be unable to deliver targeted advertising and promotions without access to a database.

These three industries are just a small part of the world’s database users. There are governments, manufacturing, and libraries.

Databases and the need for SQL are everywhere. With such broad appeal, learning a SQL programming language is a critical skill for a developer.

Is SQL a Programming Language?
A programming language is a set of rules that give instructions to computers to execute. These languages are divided into generations based on how directly the language communicates with the machine.

For example, first-generation languages wrote in machine language, and second-generation languages were assembled languages that were one step removed for direct contact with a computer.

SQL is a fourth-generation language, meaning it is a scripting language that does not require compiling to run.

Like most fourth-generation languages, SQL requires an interpreter that translates rather than compiles code.

As with all languages, SQL has rules for issuing commands and queries. Some basic SQL commands are:

SELECT. Instructs the program to locate and extract specific data fields.
UPDATE. Tells the database to edit existing data.
DELETE. Specifies what data to delete.
More advanced commands allow for complex manipulation of data, such as applying strict encryption on specific data fields.
       </string>

    <string name="dart">
       What Is Dart?
Dart is a general-purpose programming language (GPL) developed by Google, and Dart’s version 1.0 in 2013 was designed by Lars Bak and Kasper Lund.

In 2011, a US correspondent, Joab Jackson, labeled this Google-developed language as a Javascript-killer, which the developers never verified.

Nonetheless, Dart programming is created as an object-oriented programming language (OOP) that focuses on objects (like string, class, interface) and not on Math (method and logic).

In order for you to develop apps, it follows a different method from other established programming languages, like Java, as you will work with Flutter and only use Dart codes.

It is designed and created to give opportunities for developers to advance their mobile apps and fast apps using the Dart language.

Here are some other notable features about Dart:

Static type checking is embedded in the Dart programming, ensuring the data type, like a string of a variable, can be readable in its intended format.
It also has the spread operator characterized by an ellipsis (…) that literally spreads the string value into its own individual object (e.g., string, class).
The sound null safety feature is also present in Dart, which assures that a variable will not have null default values unless you input a new value indicating them as null.
Moreover, based on developers, this null safety feature helps you avoid errors and issues from null pointer dereference.

Dart 2.0 was released in 2018 with the following changes and developments from the previous version:

2.0 has a sound type system
No checked mode
2.0 has different language and libraries
2.0 has a new build system
Current versions of Dart language also work smoothly with other programming languages, such as when using Objective-C and Swift interoperability, along with improvements on the following:

Networking
Type inference
Async support
Regardless of the versions, Dart as a programming language is ECMA International-certified, which means the Dart core libraries and platforms are standardized.
        What Is the Dart Language Used For?
The Dart language has the main function of developing apps on different platforms because it falls under the umbrella of general-purpose programming language.

Aside from the mentioned function, Dart is also marketed toward client development using an object-oriented programming language, static type analysis, and C-style syntax.

Contrary to programming languages like Java, which may give developers a steep learning curve, the Dart Language aims to create a harmonious relationship between the program and the developers.

This is achieved through Dart’s built-in tools, code, comprehensive options on the Dart libraries, access to Dart platforms, and its compilers.
        Dart and Mobile App Development
The Dart program includes relatively more straightforward programming tools that prioritize object person and object creation using a string or class more than the Mathematical method, functions, and logic.

Dart code works best with Flutter’s app process to create different mobile app development languages using an interactive workflow.

In creating an app, the Flutter and Dart development creates a cross-platform interaction where it incorporates sound null safety for any variable in the code, systematic function declaration, converting different data representations with the in-system codes, and more to write an app.

As reviews say, it is like using JavaScript and C#, but better as it is great for mobile app development for beginners AND pros in the industry.
    </string>
</resources>